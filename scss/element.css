/*
=================================================
=========           FLEX GRID           =========
=================================================

[CONTAINER]
The container is the parent element of each row
and designates the width of child row. This will
usually be 100% but overwrite with your own CSS.
*/

.container {
  width: 100%;
  margin: 0 auto;
}

/*
[ROW]
The rows are nested within the containers. The row
holds nested columns. This tells the row to wrap
the content at the start of the row. Negative margin
is to offset against the gutter applied to the columns
*/

.grid-row {
  display: flex;
  margin: 0 0 0 -.5rem
}

/*
[COLUMN]
Columns hold your content and are set to automatically
fill up an equal width in the row no matter how many
columns. Each column has padding applied to give it a
gutter between elements. You can also specify specific
widths in multiples of 10%. If you specify a width for
a column you can still place the default columns along-
side it and they will take up the remaining space.
*/

.grid-col {
  display: block;
  flex: 1;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
  background-color: red;
}

.grid-col-10 {
  flex: none;
  width: 10%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-20 {
  flex: none;
  width: 20%;
  padding: .75rem;
  background-color: green;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-30 {
  flex: none;
  width: 30%;
  padding: .75rem;
  background-color: orange;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-40 {
  flex: none;
  width: 40%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-50 {
  flex: none;
  width: 50%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-60 {
  flex: none;
  width: 60%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-70 {
  flex: none;
  width: 70%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-80 {
  flex: none;
  width: 80%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-90 {
  flex: none;
  width: 90%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

/*
[MEDIA QUERIES]
To make the flex grid look good on mobile we change the
row flex direction to column to stack the columns
vertically.
*/

@media screen and ( max-width: 500px ) {
.grid-row {
  flex-direction: column;
  }
}
