/*
=================================================
=========           FLEX GRID           =========
=================================================

[CONTAINER]
The container is the parent element of each row
and designates the width of child row. This will
usually be 100% but overwrite with your own CSS.
*/

.container {
  width: 100%;
  margin: 0 auto;
}

/*
[ROW]
The rows are nested within the containers. The row
holds nested columns. This tells the row to wrap
the content at the start of the row. Negative margin
is to offset against the gutter applied to the columns
*/

.grid-row {
  display: flex;
  margin: 0 0 0 -.5rem
}

/*
[COLUMN]
Columns hold your content and are set to automatically
fill up an equal width in the row no matter how many
columns. Each column has padding applied to give it a
gutter between elements. You can also specify specific
widths in multiples of 10%. If you specify a width for
a column you can still place the default columns along-
side it and they will take up the remaining space.
*/

.grid-col {
  display: block;
  flex: 1;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
  background-color: red;
}

.grid-col-10 {
  flex: none;
  width: 10%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-20 {
  flex: none;
  width: 20%;
  padding: .75rem;
  background-color: green;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-30 {
  flex: none;
  width: 30%;
  padding: .75rem;
  background-color: orange;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-40 {
  flex: none;
  width: 40%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-50 {
  flex: none;
  width: 50%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-60 {
  flex: none;
  width: 60%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-70 {
  flex: none;
  width: 70%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-80 {
  flex: none;
  width: 80%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

.grid-col-90 {
  flex: none;
  width: 90%;
  padding: .75rem;
  margin: 0 0 .5rem .5rem ;
}

/*
[MEDIA QUERIES]
To make the flex grid look good on mobile we change the
row flex direction to column to stack the columns
vertically on devices smaller than 501px.
*/

@media screen and ( max-width: 500px ) {
.grid-row {
  flex-direction: column;
  }
}

/*
=================================================
=========          TEXT SIZING          =========
=================================================

[RESPONSIVE TEXT]
Instead of using lots of CSS rules with media queries
to size the text you can use a calc function to have
it dynamically respond to the width of the viewport.
If you want to change the size range, change the px
value and the first number in the first set of
brackets below.
*/

p {
  font-size: calc(14px + (18 - 14) * ((100vw - 300px) / (1600 - 300)));
}


/*
Because the font size is dictated with our calculation above
you can set the header sizes as em unit and they will dynamically
scale to the font size.
*/

h1 {
  font-size: calc(35px + (35 - 14) * ((100vw - 300px) / (1600 - 300)));
}

h2 {
  font-size: calc(30px + (30 - 14) * ((100vw - 300px) / (1600 - 300)));
}

h3 {
  font-size: calc(25px + (25 - 14) * ((100vw - 300px) / (1600 - 300)));
}

h4 {
  font-size: calc(20px + (20 - 14) * ((100vw - 300px) / (1600 - 300)));
}

h5 {
  font-size: calc(18px + (18 - 14) * ((100vw - 300px) / (1600 - 300)));
}

h6 {
  font-size: calc(16px + (16 - 14) * ((100vw - 300px) / (1600 - 300)));
}

/*
The above rules look great on any device above 500px but
its advised that you apply your own mobile sizes with
media queries for mobile viewports.
*/
